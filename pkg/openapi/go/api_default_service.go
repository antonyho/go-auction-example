/*
 * Auction Bid Tracker
 *
 * This is an example server for auction bid tracker.
 *
 * API version: 1.0.0
 * Contact: antony.h@riseup.net
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"errors"

	"github.com/antonyho/go-auction-example/pkg/auction"
)

// DefaultApiService is a service that implents the logic for the DefaultApiServicer
// This service should implement the business logic for every endpoint for the DefaultApi API.
// Include any external packages or services that will be required by this service.
type DefaultApiService struct {
	auctionHouse *auction.House
	auctioneer   *auction.Auctioneer
}

// NewDefaultApiService creates a default api service
func NewDefaultApiService() DefaultApiServicer {
	auctionHouse := auction.NewHouse()
	auctioneer := auction.NewAuctioneer(auctionHouse)

	return &DefaultApiService{
		auctionHouse: auctionHouse,
		auctioneer:   auctioneer,
	}
}

// AddItem -
func (s *DefaultApiService) AddItem(item Item) (interface{}, error) {
	s.auctioneer.List(item.Name)
	return nil, nil
}

// BidItemById -
// Item name is the Item ID for easier evaluation and test
func (s *DefaultApiService) BidItemById(itemName string, bidding Bidding) (interface{}, error) {
	offer := auction.NewOffer(itemName, bidding.Bidder, float64(bidding.Price))
	accepted, err := s.auctioneer.Hear(itemName, offer)
	return accepted, err
}

// CloseItem -
// Item name is the Item ID for easier evaluation and test
func (s *DefaultApiService) CloseItem(itemName string) (interface{}, error) {
	s.auctioneer.Close(itemName)
	return nil, nil
}

// GetWinningBidByItemId -
// Item name is the Item ID for easier evaluation and test
func (s *DefaultApiService) GetWinningBidByItemId(itemName string) (interface{}, error) {
	winning, err := s.auctionHouse.GetLeading(itemName)
	if err != nil {
		return nil, err
	}
	if winning != nil {
		return Bidding{
			Bidder: winning.User,
			Price:  float32(winning.Price),
		}, nil
	}

	return nil, nil
}

// ListAllBidsByItemId -
// Item name is the Item ID for easier evaluation and test
func (s *DefaultApiService) ListAllBidsByItemId(itemName string) (interface{}, error) {
	bids, err := s.auctionHouse.GetBids(itemName)
	if err != nil {
		return nil, err
	}
	biddings := make([]Bidding, len(bids))
	for idx, bid := range bids {
		biddings[idx] = Bidding{
			Bidder: bid.User,
			Price:  float32(bid.Price),
		}
	}
	return bids, nil
}

// ListAllBidsByUserId -
// User name is the User ID for easier evaluation and test
func (s *DefaultApiService) ListAllBidsByUserId(id string) (interface{}, error) {
	acitivities, err := s.auctionHouse.GetUserActivities(id)
	if err != nil {
		return nil, err
	}

	userActivities := make([]Activity, len(acitivities)) // The size is the number of bidded item
	idx := 0
	for item, bids := range acitivities {
		lastBid := bids[len(bids)-1]
		userActivities[idx] = Activity{
			Item: Item{Name: item},
			Bid:  Bidding{Bidder: lastBid.User, Price: float32(lastBid.Price)},
		}
		idx++
	}

	return userActivities, nil
}

// ListAllItems -
func (s *DefaultApiService) ListAllItems() (interface{}, error) {
	// TODO - update ListAllItems with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.
	return nil, errors.New("service method 'ListAllItems' not implemented")
}
